plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
//	id 'net.sourceforge.plantuml' version '1.2023.3' // PlantUML 플러그인 추가 다이어그램
//	id 'org.plantuml' version '1.2023.3'  // 최신 PlantUML 플러그인 버전 사용
}

group = 'com.health'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}



repositories {
	mavenCentral()
	gradlePluginPortal()
//	jcenter()  // PlantUML은 jcenter에 있을 수도 있으므로, jcenter도 추가해봅니다.
}

dependencies {
	implementation files('libs/plantuml-1.2023.3.jar')  // JAR 파일 경로
	implementation 'net.sourceforge.plantuml:plantuml:1.2023.3'
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
//	compile 'net.sourceforge.plantuml:plantuml:1.2023.3' // PlantUML JAR 파일
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'  // jaxb-runtime 추가
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	// 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// JAXB API
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
	// JAXB Runtime
	implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.2'
	//데이터 치환시 url값 고정
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.1.3'
	//WebClient
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml' // XML 지원
	implementation 'javax.xml.bind:jaxb-api' // JAXB (XML 바인딩)
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.springframework.boot:spring-boot-starter-json'
//	implementation 'org.apache.httpcomponents:httpclient:4.5.13'
	//http err시 사용
//	implementation 'org.apache.httpcomponents:httpclient:4.5.14'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'  // WebClient (비동기 요청 시)
//jsonObj사용
	implementation 'org.json:json:20210307'
}

tasks.named('test') {
	useJUnitPlatform()
}
tasks.withType(JavaCompile) {
	options.compilerArgs << '-parameters'
}
//리액트 연동 추가 8080에서 리액트 화면
def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
//	workingDir 'C:/workspace/react/healthcare'
//	commandLine 'npm', 'install'
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
//	commandLine 'java', '-jar', configurations.compileClasspath.files.find { it.name.contains("plantuml") }.absolutePath, 'src/main/plantuml/HealthCareDiagram.puml'
//	commandLine 'java', '-jar', configurations.compileClasspath.files.find { it.name.contains("plantuml") }.absolutePath, 'src/main/resources/plantuml/HealthCareDiagram.puml'
}
//task generateDocs {
//	dependsOn generateUML
//}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/dist"
	into "$projectDir/src/main/resources/static"
}
task generateDiagram(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'net.sourceforge.plantuml.Run'
	args = ['src/main/plantuml/HealthCareDiagram.puml']
}

task generateUML {
	doLast {
		def plantUmlJar = configurations.runtimeClasspath.files.find { it.name.contains('plantuml') }
		if (plantUmlJar) {
			commandLine 'java', '-jar', plantUmlJar.absolutePath, 'src/main/plantuml/HealthCareDiagram.puml'
		} else {
			throw new GradleException("PlantUML JAR file not found!")
		}
	}
}

